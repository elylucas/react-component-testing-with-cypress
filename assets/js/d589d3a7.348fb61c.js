"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[162],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>c});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=s.createContext({}),u=function(e){var t=s.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=u(e.components);return s.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),c=a,g=m["".concat(i,".").concat(c)]||m[c]||d[c]||r;return n?s.createElement(g,o(o({ref:t},p),{},{components:n})):s.createElement(g,o({ref:t},p))}));function c(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9390:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var s=n(7462),a=(n(7294),n(3905));const r={slug:"/"},o="Getting Started",l={unversionedId:"getting-started",id:"getting-started",title:"Getting Started",description:"Welcome to the Workshop!",source:"@site/docs/getting-started.md",sourceDirName:".",slug:"/",permalink:"/react-component-testing-with-cypress/",draft:!1,tags:[],version:"current",frontMatter:{slug:"/"},sidebar:"tutorialSidebar"},i={},u=[{value:"Clone Repo and",id:"clone-repo-and",level:2},{value:"Install Dependencies",id:"install-dependencies",level:2},{value:"Start Cypress",id:"start-cypress",level:2},{value:"Create LoginForm",id:"create-loginform",level:2},{value:"Button Component",id:"button-component",level:2},{value:"1st Button test, uses custom text",id:"1st-button-test-uses-custom-text",level:3},{value:"2nd Button test, should emit onClick event",id:"2nd-button-test-should-emit-onclick-event",level:3},{value:"Add Button to LoginForm",id:"add-button-to-loginform",level:3},{value:"Input Field",id:"input-field",level:2},{value:"1st InputField Test - should show error if field if is blank and form has been submitted",id:"1st-inputfield-test---should-show-error-if-field-if-is-blank-and-form-has-been-submitted",level:3},{value:"getErrorMessageFor custom command",id:"geterrormessagefor-custom-command",level:2},{value:"2nd InputField test - should not show error",id:"2nd-inputfield-test---should-not-show-error",level:3},{value:"3rd InputField test",id:"3rd-inputfield-test",level:3},{value:"4th InputField Test",id:"4th-inputfield-test",level:3},{value:"Add Inputfields to LoginForm",id:"add-inputfields-to-loginform",level:3},{value:"LoginForm Tests",id:"loginform-tests",level:2},{value:"2nd LoginForm test",id:"2nd-loginform-test",level:3},{value:"3rd Login Form test",id:"3rd-login-form-test",level:3},{value:"4th Login Form test",id:"4th-login-form-test",level:3}],p={toc:u};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,s.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started"},"Getting Started"),(0,a.kt)("p",null,"Welcome to the Workshop!"),(0,a.kt)("p",null,"This workshop covers cool stuff."),(0,a.kt)("p",null,"To get started, clone the repo and install the dependencies:"),(0,a.kt)("h2",{id:"clone-repo-and"},"Clone Repo and"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/elylucas/react-component-testing-with-cypress.git\n")),(0,a.kt)("h2",{id:"install-dependencies"},"Install Dependencies"),(0,a.kt)("p",null,"Go into the ",(0,a.kt)("strong",{parentName:"p"},"app")," directory and install the dependencies:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd app\nnpm install\n")),(0,a.kt)("p",null,"The Vite React app and Cypress are already installed, no need to set up anything\nadditional."),(0,a.kt)("h2",{id:"start-cypress"},"Start Cypress"),(0,a.kt)("p",null,"Run ",(0,a.kt)("inlineCode",{parentName:"p"},"npx cypress open")," in the ",(0,a.kt)("strong",{parentName:"p"},"app")," directory."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npx cypress open\n")),(0,a.kt)("p",null,'Select component testing and go through the setup wizard. When prompted, start\nthe test runner selecting the browser of your choice and select "Start component\ntesting".'),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"For more info on setting up Cypress for component testing in a React app, see\nthe ",(0,a.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/component-testing/react/overview"},"guide"),"\non it.")),(0,a.kt)("p",null,"You'll see that there currently isn't any specs to run. But before we create a\nspec, we need a component to test! Let's create one."),(0,a.kt)("h2",{id:"create-loginform"},"Create LoginForm"),(0,a.kt)("p",null,"Create ",(0,a.kt)("strong",{parentName:"p"},"src/components/LoginForm.tsx")," and copy the html out of\n",(0,a.kt)("strong",{parentName:"p"},"assets/form.html")," and convert it to JSX. You will need to update the ",(0,a.kt)("inlineCode",{parentName:"p"},"class"),"\nattributes to ",(0,a.kt)("inlineCode",{parentName:"p"},"className")," for React."),(0,a.kt)("p",null,"Next, copy the css from ",(0,a.kt)("strong",{parentName:"p"},"assets/form.css")," and replace the contents of\n",(0,a.kt)("strong",{parentName:"p"},"src/App.css")," with it."),(0,a.kt)("p",null,"Import the app css in ",(0,a.kt)("strong",{parentName:"p"},"cypress/support/component.ts"),"."),(0,a.kt)("p",null,"Next, we need to import the custom font design wants us to use. In\n",(0,a.kt)("strong",{parentName:"p"},"cypress/support/component-index.html")," add the font import found in\n",(0,a.kt)("strong",{parentName:"p"},"assets/font.html"),"."),(0,a.kt)("p",null,"Now the form displays like it should."),(0,a.kt)("h2",{id:"button-component"},"Button Component"),(0,a.kt)("p",null,"Create a new component at ",(0,a.kt)("strong",{parentName:"p"},"src/components/Button.tsx")," and copy the button html\nover to the JSX. Create a spec file ",(0,a.kt)("strong",{parentName:"p"},"src/components/Button.cy.tsx"),"."),(0,a.kt)("h3",{id:"1st-button-test-uses-custom-text"},"1st Button test, uses custom text"),(0,a.kt)("p",null,"Add test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"it('uses custom text for the button label', () => {\n  cy.mount(<Button>Click me!</Button>);\n  cy.get('button').should('contain.text', 'Click me!');\n});\n")),(0,a.kt)("p",null,'The test currently fails because we have hard coded the text "Login" into the\ncomponent. Lets make this more customizable by showing the ',(0,a.kt)("inlineCode",{parentName:"p"},"children")," provided\nto the component instead of the text."),(0,a.kt)("p",null,"Add children to button and use it, update the props to inherit from\n",(0,a.kt)("inlineCode",{parentName:"p"},"React.ButtonHTMLAttributes<HTMLButtonElement>")," and show it working"),(0,a.kt)("p",null,"Show how the first test is rendering a button with no text. Make the children\nrequired by adding ",(0,a.kt)("inlineCode",{parentName:"p"},"children: React.ReactNode")," to ButtonProps"),(0,a.kt)("p",null,"Update tests to compile"),(0,a.kt)("h3",{id:"2nd-button-test-should-emit-onclick-event"},"2nd Button test, should emit onClick event"),(0,a.kt)("p",null,"add a test using a spy to spy on onClick:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jsx"},"it('when button is clicked, onClick should be called', () => {\n  const onClickSpy = cy.spy().as('onClickSpy');\n  cy.mount(<Button onClick={onClickSpy}>Click me!</Button>);\n  cy.get('button').click();\n  cy.get('@onClickSpy').should('have.been.called');\n});\n")),(0,a.kt)("p",null,"Show test fails"),(0,a.kt)("p",null,"Spread props out on button."),(0,a.kt)("p",null,"Test passes"),(0,a.kt)("h3",{id:"add-button-to-loginform"},"Add Button to LoginForm"),(0,a.kt)("p",null,"add test in ",(0,a.kt)("strong",{parentName:"p"},"LoginForm.cy.tsx")," to test existence of button:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"it('form should have button with login text', () => {\n  cy.mount(<LoginForm />);\n  cy.get('button').contains('Login');\n});\n\nUpdate **LoginForm.tsx** to include button:\n\n```tsx\n<Button>Login</Button>\n")),(0,a.kt)("p",null,"Test now passes."),(0,a.kt)("h2",{id:"input-field"},"Input Field"),(0,a.kt)("p",null,"Create InputField component and spec files. Copy input field html from form.html\ninto jsx. Replace all hard coded values with props:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import React from \'react\';\n\ninterface InputFieldProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  label: string;\n  requiredMessage: string;\n}\n\nconst InputField: React.FC<InputFieldProps> = ({\n  label,\n  requiredMessage,\n  ...props\n}) => {\n  return (\n    <label className="label">\n      {label}:\n      <input\n        type="text"\n        className="input"\n        aria-invalid="true"\n        aria-errormessage={`error-${props.name}`}\n        {...props}\n      />\n      <span id={`error-${props.name}`} className="error">\n        {requiredMessage}\n      </span>\n    </label>\n  );\n};\n\nexport default InputField;\n')),(0,a.kt)("h3",{id:"1st-inputfield-test---should-show-error-if-field-if-is-blank-and-form-has-been-submitted"},"1st InputField Test - should show error if field if is blank and form has been submitted"),(0,a.kt)("p",null,"Update form to take a submitted prop, and use it in JSX:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'return (\n  <label className="label">\n    {label}:\n    <input\n      type="text"\n      className="input"\n      aria-invalid={submitted && !props.value}\n      aria-errormessage={`error-${props.name}`}\n      {...props}\n    />\n    <span id={`error-${props.name}`} className="error">\n      {requiredMessage}\n    </span>\n  </label>\n);\n')),(0,a.kt)("p",null,"Show test using id:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"cy.get(`#error-username`).should('contain.text', 'Username is required');\n")),(0,a.kt)("p",null,"Show how to use just ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.contains")," but it doesn't provide context to the\nelement."),(0,a.kt)("p",null,"Would be nice to use something like: ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.getErrorMessageFor('Username')"),"."),(0,a.kt)("h2",{id:"geterrormessagefor-custom-command"},"getErrorMessageFor custom command"),(0,a.kt)("p",null,"Add the following into ",(0,a.kt)("strong",{parentName:"p"},"cypress/support/commands.ts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"declare global {\n  namespace Cypress {\n    interface Chainable {\n      getErrorMessageFor: typeof getErrorMessageFor;\n    }\n  }\n}\n\nCypress.Commands.add('getErrorMessageFor', getErrorMessageFor);\n\nfunction getErrorMessageFor(label: string) {\n  return cy.contains('label', label).then((label) => {\n    const htmlFor = label.attr('for');\n    if (htmlFor) {\n      cy.get(`input#${htmlFor}`).as('input');\n    } else {\n      cy.wrap(label).find('input').as('input');\n    }\n    cy.get('@input')\n      .invoke('attr', 'aria-errormessage')\n      .then((value) => {\n        return cy.get(`#${value}`);\n      });\n  });\n}\n\nexport {};\n")),(0,a.kt)("p",null,"now we can use that command."),(0,a.kt)("h3",{id:"2nd-inputfield-test---should-not-show-error"},"2nd InputField test - should not show error"),(0,a.kt)("p",null,"Should not show error when field has not been submitted and there is not value"),(0,a.kt)("p",null,"Add test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"it('should NOT show error if there is no value and form has NOT been submitted', () => {\n  mount(\n    <InputField\n      name=\"username\"\n      label=\"Username\"\n      requiredMessage=\"Username is required\"\n      value={''}\n      submitted={false}\n    />\n  );\n\n  cy.getErrorMessageFor('Username').should('not.be.visible');\n});\n")),(0,a.kt)("p",null,"Show test fail"),(0,a.kt)("p",null,"Explain how we are using aria attributes and css to show/hide error"),(0,a.kt)("p",null,"Update aria invalid attr on input to control valid:\n",(0,a.kt)("inlineCode",{parentName:"p"},"aria-invalid={submitted && !props.value}")),(0,a.kt)("p",null,"Test passes"),(0,a.kt)("h3",{id:"3rd-inputfield-test"},"3rd InputField test"),(0,a.kt)("p",null,"Should not show error when field has been submitted and there is value"),(0,a.kt)("p",null,"Add test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"it('should NOT show error if there is a value and form has been submitted', () => {\n  cy.mount(\n    <InputField\n      name=\"username\"\n      label=\"Username\"\n      requiredMessage=\"Username is required\"\n      value={'abc123'}\n      submitted={false}\n    />\n  );\n\n  cy.getErrorMessageFor('Username').should('not.be.visible');\n});\n")),(0,a.kt)("h3",{id:"4th-inputfield-test"},"4th InputField Test"),(0,a.kt)("p",null,"when input is modified, onChange should be called"),(0,a.kt)("p",null,"Add test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"it('when input is modified, onChange should be called', () => {\n  mount(\n    <InputField\n      name=\"username\"\n      label=\"Username\"\n      requiredMessage=\"Username is required\"\n      value={'abc123'}\n      submitted={false}\n      onChange={cy.spy().as('onChangeSpy')}\n    />\n  );\n});\n")),(0,a.kt)("p",null,"lets add a ",(0,a.kt)("inlineCode",{parentName:"p"},"getInputFor")," command to get inputs"),(0,a.kt)("p",null,"add to commands:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Cypress.Commands.add('getInputFor', getInputFor);\n\nfunction getInputFor(label: string) {\n  return cy.contains('label', label).then((label) => {\n    const htmlFor = label.attr('for');\n    if (htmlFor) {\n      return cy.get(`input#${htmlFor}`);\n    } else {\n      return cy.wrap(label).find('input');\n    }\n  });\n}\n")),(0,a.kt)("p",null,"update test to:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"cy.getInputFor('Username').type('abc123');\n\ncy.get('@onChangeSpy').should((spy: any) => {\n  const args = spy.getCall(0).args;\n  expect(args[0].target.value).to.equal('abc123');\n});\ncy.getInputFor('Username').should('contain.value', 'abc123');\n")),(0,a.kt)("p",null,"Explain how passing an object to have been called does a shallow compare."),(0,a.kt)("p",null,"Show test fail."),(0,a.kt)("p",null,"Spread props across input field, and take away type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"<input\n  className={styles.input}\n  aria-invalid={submitted && !props.value}\n  aria-errormessage={`error-${props.name}`}\n  {...props}\n/>\n")),(0,a.kt)("h3",{id:"add-inputfields-to-loginform"},"Add Inputfields to LoginForm"),(0,a.kt)("p",null,"Remove input html from LoginForm, and add tests to show their existence:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"LoginForm.cy.tsx","LoginForm.cy.tsx":!0},"it('form should have username and password inputs', () => {\n  cy.mount(<LoginForm />);\n  cy.get('input[type=text]')\n    .should('have.attr', 'name')\n    .and('equal', 'username');\n  cy.get('input[type=password]')\n    .should('have.attr', 'name')\n    .and('equal', 'password');\n});\n")),(0,a.kt)("p",null,"Add input fields to LoginForm"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'<>\n  <InputField\n    name="username"\n    label="Username"\n    requiredMessage="Username is required"\n    type="text"\n    submitted={false}\n  />\n  <InputField\n    name="password"\n    label="Password"\n    requiredMessage="Password is required"\n    type="password"\n    submitted={false}\n  />\n</>\n')),(0,a.kt)("p",null,"show tests pass."),(0,a.kt)("h2",{id:"loginform-tests"},"LoginForm Tests"),(0,a.kt)("p",null,"fields should show validation messages if they are blank and form is submitted"),(0,a.kt)("p",null,"Add test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"it('fields should show validation messages if they are blank and form is submitted', () => {\n  cy.mount(<LoginForm />);\n  cy.get('button').contains('Login').click();\n  cy.getErrorMessageFor('Username').should('be.visible');\n  cy.getErrorMessageFor('Password').should('be.visible');\n});\n")),(0,a.kt)("p",null,"Form goes crazy over form submit, so add handleSubmit method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const handleSubmit = (event: React.FormEvent) => {\n  event.preventDefault();\n};\n")),(0,a.kt)("p",null,"Test now fails."),(0,a.kt)("p",null,"Add submitted state to form and update it to true on handleSubmit:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const [submitted, setSubmitted] = useState(false);\n\n<InputField\n  type="text"\n  label="Username"\n  name="username"\n  submitted={submitted}\n  requiredMessage="Username is required"\n  value={\'\'}\n/>;\n// same for password\n\nconst handleSubmit = (event: React.FormEvent) => {\n  event.preventDefault();\n  setSubmitted(true);\n};\n')),(0,a.kt)("p",null,"Test now passes"),(0,a.kt)("h3",{id:"2nd-loginform-test"},"2nd LoginForm test"),(0,a.kt)("p",null,"Should not show validation errors when inputs have value and form is submitted"),(0,a.kt)("p",null,"Add test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"it('should NOT show validation messages if inputs have value and form is submitted', () => {\n  cy.mount(<LoginForm />);\n\n  cy.getInputFor('Username').type('testuser');\n  cy.getInputFor('Password').type('testpassword');\n  cy.get('button').contains('Login').click();\n\n  cy.getErrorMessageFor('Username').should('not.be.visible');\n  cy.getErrorMessageFor('Password').should('not.be.visible');\n});\n")),(0,a.kt)("p",null,"Test fails, because controlled inputs are not being modified."),(0,a.kt)("p",null,"Add username, password state fields and update inputs to use them:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'const [username, setUsername] = useState(\'\');\nconst [password, setPassword] = useState(\'\');\n\n<InputField\n  name="username"\n  label="Username"\n  requiredMessage="Username is required"\n  type="text"\n  submitted={submitted}\n  value={username}\n  onChange={(e) => setUsername(e.target.value)}\n/>;\n//same for password\n')),(0,a.kt)("h3",{id:"3rd-login-form-test"},"3rd Login Form test"),(0,a.kt)("p",null,"Invalid username/password error should show when credentials are invalid"),(0,a.kt)("p",null,"Add test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"it('should show invalid username and password message when credentials are invalid', () => {\n  cy.mount(<LoginForm />);\n\n  cy.getInputFor('Username').type('baduser');\n  cy.getInputFor('Password').type('badpassword');\n  cy.get('button').contains('Login').click();\n\n  cy.contains('Bad username or password').should('be.visible');\n});\n")),(0,a.kt)("p",null,"Show test fail."),(0,a.kt)("p",null,"Add login method, errorMessageState, call login from handleSubmit:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const [errorMessage, setErrorMessage] = useState('');\n\nconst handleSubmit = (event: React.FormEvent) => {\n  event.preventDefault();\n  setSubmitted(true);\n  setErrorMessage('');\n  if (username && password) {\n    login(username, password);\n  }\n};\n\nconst login = async (username: string, password: string) => {\n  const res = await fetch('/auth', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ username, password }),\n  });\n  if (res.status === 401) {\n    setErrorMessage('Bad username or password');\n  }\n};\n\n{\n  errorMessage && <div className={styles.error}>{errorMessage}</div>;\n}\n")),(0,a.kt)("p",null,"Test still fails, we need to intercept in test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"// after mount:\ncy.intercept('POST', '/auth', {\n  statusCode: 401,\n});\n")),(0,a.kt)("h3",{id:"4th-login-form-test"},"4th Login Form test"),(0,a.kt)("p",null,"When creds are valid, user should be redirected to home page"),(0,a.kt)("p",null,"Add Test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"it('should show welcome message when credentials are valid', () => {\n  cy.intercept('POST', '/auth', {\n    statusCode: 200,\n  });\n\n  cy.mount(<LoginForm />);\n\n  cy.getInputFor('Username').type('testuser');\n  cy.getInputFor('Password').type('testpassword');\n  cy.get('button').contains('Login').click();\n\n  cy.contains('Welcome testuser!').should('be.visible');\n});\n")),(0,a.kt)("p",null,"Import useNavigation from react-router-dom in LoginForm.tsx and use it on\nsuccessful login:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useNavigate } from 'react-router-dom';\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const navigate = useNavigate();\n\n//in login\nif (res.status === 200) {\n  navigate('/home');\n}\n")),(0,a.kt)("p",null,"Show test fails as there is no router provider context."),(0,a.kt)("p",null,"Rename component.ts to component.tsx so we can use JSX in it, then update mount\nmethod to use MemoryRouter provider in component.tsx:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"Cypress.Commands.add('mount', (jsx) => {\n  return mount(<MemoryRouter>{jsx}</MemoryRouter>);\n});\n")),(0,a.kt)("p",null,"Use DI to inject useNavigate method into component via prop."),(0,a.kt)("p",null,"alias useNavigate to ","_","useNavigate"),(0,a.kt)("p",null,"update interface:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"interface LoginFormProps {\n  useNavigate?: typeof _useNavigate;\n}\n")),(0,a.kt)("p",null,"add prop:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const LoginForm: React.FC<LoginFormProps> = ({ useNavigate = _useNavigate }) => \n")),(0,a.kt)("p",null,"add spy and test it was called:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"const navigateSpy = cy.spy().as('navigateSpy')\n\ncy.mount(<LoginForm useNavigate={() => navigateSpy} />);\n\n/// after actions\n\n\n")))}d.isMDXComponent=!0}}]);