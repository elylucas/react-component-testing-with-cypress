{"codeFragments":[{"label":"Create Button.tsx","content":"import React from 'react';\n\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  \n}\n\nconst Button: React.FC<ButtonProps> = () => {\n  return (\n    <div>Button</div>\n  );\n};\n\nexport default Button;"},{"label":"Button - 1st test","content":"it('uses custom text for button label', () => {\n    cy.mount(<Button>Click Me!</Button>);\n  })"},{"label":"Button - 2nd test","content":"it('when button is clicked, onClick should be called', () => {\n     cy.mount(<Button>Click me!</Button>);\n  });"},{"label":"LoginForm - Include Button Test","content":"it('form should have button with login text', () => {\n    cy.mount(<LoginForm />);\n    cy.get('button').contains('Login');\n  });"},{"label":"Create InputField.tsx","content":"import React from 'react';\n\ninterface InputFieldProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  \n}\n\nconst InputField: React.FC<InputFieldProps> = () => {\n  return (\n    <div>InputField</div>\n  );\n};\n\nexport default InputField;\n"},{"label":"InputField - Mount fn","content":"function mount(InputField: JSX.Element) {\n  cy.viewport(400, 150);\n  cy.mount(<div style={{ padding: 10 }}>{InputField}</div>);\n}"},{"label":"InputField - Required Msg tests","content":"it('should show error if field if is blank and form has been submitted', () => {\n    mount(\n      <InputField\n        label=\"Name\"\n        requiredMessage=\"Name is required\"\n        value={''}\n        submitted={true}\n      />\n    );\n\n    cy.get('span').contains('Name is required').should('be.visible');\n  });\n\n  it('should NOT show error if field is blank and form has NOT been submitted', () => {\n    mount(\n      <InputField\n        name=\"name\"\n        label=\"Name\"\n        requiredMessage=\"Name is required\"\n        value={''}\n        submitted={false}\n      />\n    );\n\n    cy.get('span').contains('Name is required').should('not.be.visible');\n  });\n\n  it('should NOT show error if there is a value and form has been submitted', () => {\n    mount(\n      <InputField\n        name=\"name\"\n        label=\"Name\"\n        requiredMessage=\"Name is required\"\n        value={'abc123'}\n        submitted={true}\n      />\n    );\n\n    cy.get('span').contains('Name is required').should('not.be.visible');\n  });"},{"label":"InputField - onChange test","content":"it('when input is modified, onChange should be called', () => {\n    mount(\n      <InputField\n        name=\"name\"\n        label=\"Name\"\n        requiredMessage=\"Name is required\"\n        submitted={false}\n        onChange={cy.spy().as('onChangeSpy')}\n      />\n    );\n\n    //type into input\n    cy.get('input').type('abc123')\n\n    //assert spy was called  \n    cy.get('@onChangeSpy').should('have.been.called')\n        \n  });"},{"label":"InputField - onChange check","content":"cy.get('@onChangeSpy').should((spy: any) => {\n      const args = spy.getCall(0).args;\n      expect(args[0].target.value).to.equal('abc123');\n    });"},{"label":"LoginForm - Include Inputs test","content":"it('form should have username and password inputs', () => {\n    cy.mount(<LoginForm />);\n    cy.get('input[type=text]')\n      .should('have.attr', 'name')\n      .and('equal', 'username');\n    cy.get('input[type=password]')\n      .should('have.attr', 'name')\n      .and('equal', 'password');\n  });"},{"label":"LoginForm - Add InputFields","content":"<InputField\n          type=\"text\"\n          name=\"username\"\n          label='Username'\n          requiredMessage='Username is required'\n          submitted={false}\n        />\n        <InputField\n          type=\"password\"\n          name=\"password\"\n          label='Password'\n          requiredMessage='Password is required'\n          submitted={false}\n        />"},{"label":"LoginForm - Validation tests","content":"it('should show validation messages if inputs have NO value and form is submitted', () => {\n    cy.mount(<LoginForm />);\n\n    cy.get('button').contains('Login').click();\n\n    cy.get('span').contains('Username is required').should('be.visible');\n    cy.get('span').contains('Password is required').should('be.visible');\n  });\n\n  it('should NOT show validation messages if inputs have value and form is submitted', () => {\n    cy.mount(<LoginForm />);\n\n    cy.contains('Username').find('input').type('testuser');\n    cy.contains('Password').find('input').type('testpassword');\n    \n    cy.get('button').contains('Login').click();\n\n    cy.contains('span', 'Username is required').should('not.be.visible');\n    cy.contains('span', 'Password is required').should('not.be.visible');\n  });"},{"label":"LoginForm - handleSubmit fn","content":"const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n  }"},{"label":"LoginForm - Auth tests","content":"it('should show invalid username and password message when credentials are invalid', () => {\n    cy.mount(<LoginForm />);\n\n    cy.contains('Username').find('input').type('baduser');\n    cy.contains('Password').find('input').type('badpassword');\n    cy.get('button').contains('Login').click();\n\n    cy.contains('div', 'Bad username or password').should('be.visible');\n  });\n  \n  it('should show welcome message when credentials are valid', () => {\n    cy.mount(<LoginForm />);\n\n    cy.contains('Username').find('input').type('testuser');\n    cy.contains('Password').find('input').type('testpassword');\n    cy.get('button').contains('Login').click();\n\n    cy.contains('div', 'Welcome testuser!').should('be.visible');\n  });"},{"label":"LoginForm - login fn","content":"const login = async (username: string, password: string) => {\n    const res = await fetch('/auth', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password }),\n    });\n    if (res.status === 200) {\n      // auth valid\n    } else if (res.status === 401) {\n      // auth invalid\n    }\n  };\n"}]}