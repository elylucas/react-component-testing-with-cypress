{"codeFragments":[{"label":"Button - 1st test","content":"it('uses custom text for button label', () => {\n    cy.mount(<Button />);\n  })"},{"label":"Button - 2nd test","content":"it('when button is clicked, onClick should be called', () => {\n     cy.mount(<Button>Click me!</Button>);\n  });"},{"label":"InputField - Mount fn","content":"function mount(InputField: JSX.Element) {\n  cy.viewport(400, 150);\n  cy.mount(<div style={{ padding: 10 }}>{InputField}</div>);\n}"},{"label":"LoginForm - Include Button Test","content":"it('form should have button with login text', () => {\n    cy.mount(<LoginForm />);\n    cy.get('button').contains('Login');\n  });"},{"label":"InputField - 1st test","content":"it('should show error if field if is blank and form has been submitted', () => {\n    mount(\n      <InputField\n        label=\"Name\"\n        requiredMessage=\"Name is required\"\n        submitted={true}\n      />\n    );\n  });"},{"label":"InputField - 2nd test","content":"it('should NOT show error if there is no value and form has NOT been submitted', () => {\n    mount(\n      <InputField\n        name=\"name\"\n        label=\"Name\"\n        requiredMessage=\"Name is required\"\n        value={''}\n        submitted={false}\n      />\n    );\n\n    \n  });"},{"label":"InputField - 3rd test","content":"it('should NOT show error if there is a value and form has been submitted', () => {\n    mount(\n      <InputField\n        name=\"name\"\n        label=\"Name\"\n        requiredMessage=\"Name is required\"\n        value={'abc123'}\n        submitted={false}\n      />\n    );\n\n  });"},{"label":"InputField - 4th test","content":"it('when input is modified, onChange should be called', () => {\n    mount(\n      <InputField\n        name=\"name\"\n        label=\"Name\"\n        requiredMessage=\"Name is required\"\n        value={'abc123'}\n        submitted={false}\n        // setup spy\n      />\n    );\n\n    //type into input\n\n    //assert spy was called with input\n    //assert input contains value\n    \n  });"},{"label":"InputField - onChange check","content":"cy.get('@onClickSpy').should((spy: any) => {\n      const args = spy.getCall(0).args;\n      expect(args[0].target.value).to.equal('abc123');\n    });"},{"label":"LoginForm - Include Inputs test","content":"it('form should have username and password inputs', () => {\n    cy.mount(<LoginForm />);\n    cy.get('input[type=text]')\n      .should('have.attr', 'name')\n      .and('equal', 'username');\n    cy.get('input[type=password]')\n      .should('have.attr', 'name')\n      .and('equal', 'password');\n  });"},{"label":"LoginForm - 1st test","content":"it('fields should show validation messages if they are blank and form is submitted', () => {\n    cy.mount(<LoginForm />);\n    cy.get('button').contains('Login').click();\n    cy.get('span').contains('Username is required').should('be.visible');\n    cy.get('span').contains('Password is required').should('be.visible');\n  });"},{"label":"LoginForm - handleSubmit fn","content":"const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n  }"},{"label":"LoginForm - 2nd test","content":"it('should NOT show validation messages if inputs have value and form is submitted', () => {\n    cy.mount(<LoginForm />);\n\n    cy.contains('Username').find('input').type('testuser');\n    cy.contains('Password').find('input').type('testpassword');\n    cy.get('button').contains('Login').click();\n\n    cy.contains('span', 'Username is required').should('not.be.visible');\n    cy.contains('span', 'Password is required').should('not.be.visible');\n  });"},{"label":"LoginForm - 3rd test","content":"it('should show invalid username and password message when credentials are invalid', () => {\n    cy.mount(<LoginForm />);\n\n    cy.contains('Username').find('input').type('baduser');\n    cy.contains('Password').find('input').type('badpassword');\n    cy.get('button').contains('Login').click();\n\n    cy.contains('div', 'Bad username or password').should('be.visible');\n  });"},{"label":"LoginForm - login fn","content":"const login = async (username: string, password: string) => {\n    const res = await fetch('/auth', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ username, password }),\n    });\n    if (res.status === 401) {\n      setErrorMessage('Bad username or password');\n    }\n  };\n"},{"label":"LoginForm - 4th test","content":"it('should show welcome message when credentials are valid', () => {\n    cy.mount(<LoginForm />);\n    cy.intercept('POST', '/auth', {\n      statusCode: 200,\n    });\n\n    cy.contains('Username').find('input').type('testuser');\n    cy.contains('Password').find('input').type('testpassword');\n    cy.get('button').contains('Login').click();\n\n    cy.contains('div', 'Welcome testuser!').should('be.visible');\n  });"}]}